// Generated by CoffeeScript 1.3.3
(function() {
  var Query, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Query = (function() {

    Query.prototype.table_name = null;

    Query.prototype.adapter = function(sql, args, callback) {};

    Query.create_connection = function() {};

    Query.self = Query;

    /*
        查询接口:
        
        ```` js
    
            user = User.find('id = ?' , 1);
            console.log(user.get());
    
        ````
    */


    Query.find = function() {
      var args, condition, query;
      condition = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (condition == null) {
        condition = null;
      }
      query = new this;
      if (condition === null) {
        return query;
      }
      return query.where.apply(query, arguments);
    };

    Query.as = function(as) {
      var query;
      query = new this;
      return query.as(as);
    };

    Query.add = function(data) {
      var query;
      query = new this;
      return query.add(data);
    };

    function Query() {
      this.to_sql = __bind(this.to_sql, this);
      this._select = [];
      this._where = [];
      this._joins = [];
      this._order = '';
      this._group = '';
      this._having = null;
      this._limit = null;
      this._offset = null;
      this._as = null;
      this._query_type = 'SELECT';
      this._args = [];
      this._attr = {};
      this._page = null;
      this._page_size = null;
      this._key = ["!", "=", "<", ">", '(', ')', '?', '*', ',', 'IN', 'ON', 'NOT', 'AS', 'AND', 'OR', 'NULL', 'IS', 'SELECT', 'FROM', 'JOIN', 'LEFT', 'RIGHT', 'INNER', 'COUNT', 'MAX', 'MIN', 'AVG', 'SUM', 'WHERE', 'ORDER', 'ASC', 'DESC', 'GROUP', 'HAVING', 'LIMIT', 'OFFSET'];
    }

    Query.prototype.execute = function(callback) {
      return this.adapter(this.to_sql(), this._args, callback);
    };

    Query.prototype.as = function(as) {
      this._as = as.trim();
      return this;
    };

    /*
        查询条件 "and"：
    
        ```` js
        
            user = User.find('id = ?' , 1);
            user.where('sex != 0');
            console.log(user.get());
    
        ````
    */


    Query.prototype.where = function() {
      var args, condition;
      condition = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (condition == null) {
        condition = null;
      }
      if (condition !== null) {
        this._where.push({
          type: 'AND',
          condition: condition.trim(),
          args: args
        });
      }
      return this;
    };

    /*
        查询条件 "or"：
    
        ```` js
        
            user = User.find('id = ?' , 1);
            user.or('sex = 1');
            console.log(user.get());
    
        ````
    */


    Query.prototype.or = function() {
      var args, condition;
      condition = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (condition == null) {
        condition = null;
      }
      if (condition !== null) {
        this._where.push({
          type: 'OR',
          condition: condition.trim(),
          args: args
        });
      }
      return this;
    };

    /*
        选择字段：
    
        ```` js
        
            user = User.find('id = ?' , 1);
            user.select('id , name');
            // or
            user.select(['id' , 'name'])
            console.log(user.get());
    
        ````
    */


    Query.prototype.select = function(fields) {
      var field, v, _i, _len;
      this._select = [];
      if (false === Array.isArray(fields)) {
        fields = fields.split(',');
      }
      fields = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          field = fields[_i];
          _results.push(field.trim());
        }
        return _results;
      })();
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        v = fields[_i];
        if (v.indexOf('.') === -1) {
          v = this._get_table_as() + '.' + v;
        }
        if (__indexOf.call(this._select, v) < 0) {
          this._select.push(v);
        }
      }
      return this;
    };

    Query.prototype.join = function() {
      var args, condition, table;
      table = arguments[0], condition = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (this.is_string(table)) {
        table = this.encode_sql(table);
      } else if (table._get_table_name) {
        table = this.encode_sql(table._get_table_name());
      } else {
        return new Error('table type Error');
      }
      this._joins.push({
        type: 'INNER',
        table: table,
        condition: condition.trim(),
        args: args
      });
      return this;
    };

    Query.prototype.left_join = function() {
      var args, condition, table;
      table = arguments[0], condition = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (this.is_string(table)) {
        table = this.encode_sql(table);
      } else if (table._get_table_name) {
        table = this.encode_sql(table._get_table_name());
      } else {
        return new Error('table type Error');
      }
      this._joins.push({
        type: 'LEFT',
        table: table,
        condition: condition.trim(),
        args: args
      });
      return this;
    };

    Query.prototype.right_join = function() {
      var args, condition, table;
      table = arguments[0], condition = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (this.is_string(table)) {
        table = this.encode_sql(table);
      } else if (table._get_table_name) {
        table = this.encode_sql(table._get_table_name());
      } else {
        return new Error('table type Error');
      }
      this._joins.push({
        type: 'RIGHT',
        table: table,
        condition: condition.trim(),
        args: args
      });
      return this;
    };

    Query.prototype.group = function(condition) {
      this._group = " GROUP BY " + (this.encode_sql(condition));
      return this;
    };

    Query.prototype.order = function(condition) {
      return this._order = " ORDER BY " + (this.encode_sql(condition));
    };

    Query.prototype.limit = function(limit, offset) {
      if (offset == null) {
        offset = 0;
      }
      this._limit = Number(limit);
      this._offset = Number(offset);
      return this;
    };

    Query.prototype.page = function(page, page_size) {
      if (page == null) {
        page = 1;
      }
      if (page_size == null) {
        page_size = 10;
      }
      this._page = Number(page);
      this._page_size = Number(page_size);
      return this.limit(this._page_size, (this._page - 1) * this._page_size);
    };

    /*
            取分页对象
    */


    Query.prototype.get_pagination = function(callback) {
      var k, query,
        _this = this;
      if (this._page === null || this._page_size === null) {
        return callback(false);
      }
      query = new this.constructor.self;
      for (k in this) {
        query[k] = this[k];
      }
      return query.count(function(count) {
        var count_page, next, prev;
        count_page = Math.ceil(count / _this._page_size);
        prev = 1;
        next = count_page;
        if (_this._page > 1) {
          prev = _this._page - 1;
        }
        if (_this._page + 1 < count_page) {
          next = _this._page + 1;
        }
        return callback({
          count: count,
          count_page: count_page,
          prev: prev,
          current: _this._page,
          page_size: _this._page_size
        });
      });
    };

    /*
            指定取几条数据
    */


    Query.prototype.get = function(count, callback) {
      if (count == null) {
        count = 1;
      }
      this._limit = Number(count);
      this._offset = 0;
      this._query_type = 'SELECT';
      return this.execute(function(rows, err) {
        if (err) {
          return callback(false);
        }
        if (count === 1) {
          return callback(rows[0]);
        }
        return callback(rows);
      });
    };

    /*
            取所有合符条件的数据
    */


    Query.prototype.all = function(callback) {
      this._limit = null;
      this._offset = null;
      this._query_type = 'SELECT';
      return this.execute(function(rows, err) {
        if (err) {
          return callback(false);
        }
        return callback(rows);
      });
    };

    Query.prototype.count = function(callback) {
      this._select = ['COUNT(*) AS row_count'];
      this._query_type = 'SELECT';
      return this.get(1, function(row) {
        if (row && row.row_count) {
          return callback(Number(row.row_count));
        }
        return callback(0);
      });
    };

    /*
            添加数据
    */


    Query.prototype.add = function(data) {
      var k, v;
      this._attr = {};
      for (k in data) {
        v = data[k];
        this._attr[k.trim()] = v.toString();
      }
      this._query_type = 'INSERT';
      return this;
    };

    /*
            保存数据
    */


    Query.prototype.save = function(data) {
      var k, v;
      this._attr = {};
      for (k in data) {
        v = data[k];
        this._attr[k.trim()] = v.toString();
      }
      this._query_type = 'UPDATE';
      return this;
    };

    /*
            删除数据
    */


    Query.prototype.remove = function() {
      this._query_type = 'DELETE';
      return this;
    };

    Query.prototype._get_table_name = function() {
      if (this._as === null) {
        return this.table_name;
      }
      return "" + this.table_name + " AS " + this._as;
    };

    Query.prototype._get_table_as = function() {
      if (this._as === null) {
        return this.table_name;
      }
      return this._as;
    };

    Query.prototype._select_to_sql = function() {
      var fields, v;
      if (this._select.length === 0) {
        return '*';
      }
      fields = (function() {
        var _i, _len, _ref, _results;
        _ref = this._select;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(this.encode_sql(v));
        }
        return _results;
      }).call(this);
      return " " + (fields.join(',')) + " ";
    };

    Query.prototype._join_to_sql = function() {
      var a, condition, sql, v, _i, _j, _len, _len1, _ref, _ref1;
      if (this._joins.length === 0) {
        return '';
      }
      sql = [];
      _ref = this._joins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        condition = this.encode_sql(v.condition);
        _ref1 = v.args;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          a = _ref1[_j];
          this._args.push(a);
        }
        sql.push("" + v.type + " JOIN " + v.table + " ON ( " + condition + " )");
      }
      return " " + (sql.join(' '));
    };

    Query.prototype._limit_to_sql = function() {
      var sql;
      if (this._limit === null && this._offset === null) {
        return '';
      }
      if (false === this.is_number(this._limit)) {
        this._limit = 1;
      }
      if (this.is_number(this._offset)) {
        sql = " LIMIT " + this._offset + " , " + this._limit;
      } else {
        sql = " LIMIT " + this._limit;
      }
      return sql;
    };

    Query.prototype._where_to_sql = function() {
      var a, condition, k, sql, v, _i, _j, _len, _len1, _ref, _ref1;
      if (this._where.length === 0) {
        return '';
      }
      sql = [];
      _ref = this._where;
      for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
        v = _ref[k];
        condition = this.encode_sql(v.condition);
        _ref1 = v.args;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          a = _ref1[_j];
          this._args.push(a);
        }
        if (k > 0) {
          sql.push("" + v.type + " ( " + condition + " )");
        } else {
          sql.push("( " + condition + " )");
        }
      }
      return " WHERE ( " + (sql.join(' ')) + " )";
    };

    Query.prototype.field = function(field) {
      if (field.indexOf('.') === -1) {
        return this._get_table_as() + '.' + field;
      }
      return field;
    };

    Query.prototype.encode_sql = function(condition) {
      var condition_arr, k, key, str, v, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      if (condition === null) {
        return condition;
      }
      key = this._key;
      condition = condition.replace(new RegExp("\\x28", "g"), " ( ");
      condition = condition.replace(new RegExp("\\x29", "g"), " ) ");
      condition = condition.replace(new RegExp("\\x3F", "g"), " ? ");
      condition = condition.replace(new RegExp("\\x2A", "g"), " * ");
      _ref = ["!", "=", "<", ">", ","];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        condition = condition.replace(new RegExp(v, "g"), " " + v + " ");
      }
      condition = condition.replace(new RegExp("@.", "g"), this._get_table_as() + '.');
      condition_arr = [];
      _ref1 = condition.split(' ');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        v = _ref1[_j];
        v = v.trim();
        if (v !== '') {
          if (_ref2 = v.toUpperCase(), __indexOf.call(key, _ref2) >= 0) {
            condition_arr.push(v.toUpperCase());
          } else {
            condition_arr.push(this.encode(v));
          }
        }
      }
      str = condition_arr.join(' ');
      key = ["!=", "<=", ">=", "<>"];
      _ref3 = ["! =", "< =", "> =", "< >"];
      for (k = _k = 0, _len2 = _ref3.length; _k < _len2; k = ++_k) {
        v = _ref3[k];
        str = str.replace(new RegExp(v, "g"), key[k]);
      }
      str = str.replace(new RegExp(" \\x28", "g"), "(");
      return str;
    };

    Query.prototype.is_number = function(n) {
      return false === isNaN(parseFloat(n)) && isFinite(n);
    };

    Query.prototype.is_string = function(x) {
      return !!(x === '' || (x && x.charCodeAt && x.substr));
    };

    Query.prototype.encode = function(name) {
      var names, v;
      if (this.is_number(name)) {
        return Number(name);
      }
      if (name.indexOf('.') !== -1) {
        names = (function() {
          var _i, _len, _ref, _results;
          _ref = name.split('.');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push("`" + v + "`");
          }
          return _results;
        })();
        return names.join('.');
      }
      return "`" + name + "`";
    };

    Query.prototype.to_sql = function() {
      var fields, k, sql, v, values, _ref, _ref1;
      sql = '';
      switch (this._query_type) {
        case 'INSERT':
          sql = "INSERT INTO " + (this.encode_sql(this._get_table_name())) + " ";
          fields = [];
          values = [];
          this._args = [];
          _ref = this._attr;
          for (k in _ref) {
            v = _ref[k];
            fields.push(this.encode(k));
            values.push('?');
            this._args.push(v);
          }
          sql = sql + ("(" + (fields.join(',')) + ") VALUES (" + (values.join(',')) + ")");
          break;
        case 'UPDATE':
          sql = "UPDATE " + (this.encode_sql(this._get_table_name())) + " SET ";
          fields = [];
          this._args = [];
          _ref1 = this._attr;
          for (k in _ref1) {
            v = _ref1[k];
            fields.push(this.encode_sql("" + k + " = ?"));
            this._args.push(v);
          }
          sql = sql + ("" + (fields.join(' , ')) + "" + (this._where_to_sql()) + " " + (this._limit_to_sql()));
          break;
        case 'DELETE':
          sql = "DELETE FROM " + (this.encode_sql(this._get_table_name())) + "" + (this._where_to_sql()) + " " + (this._limit_to_sql()) + "";
          break;
        default:
          sql = "SELECT " + (this._select_to_sql()) + " FROM " + (this.encode_sql(this._get_table_name())) + "" + (this._join_to_sql()) + "" + (this._where_to_sql()) + "" + this._group + "" + this._order + "" + (this._limit_to_sql()) + "";
      }
      return sql;
    };

    return Query;

  })();

  exports = module.exports = Query;

}).call(this);
